type Query {
	node: NodeQuery
}

type NodeQuery {
	companyHome: Node!
	userHome: Node!
	sharedHome: Node!
	sitesHome: Node!
	
	byNodeRef(nodeRef: String!) : Node
	byUuid(uuid: String!) : Node
	query(params: SearchParameters!): [Node!]!
}

type Node {
	nodeRef: ID!
	uuid: ID!
	type: QName!
	aspects: [QName!]!
	
	pathDisplay: String!
	pathPrefixString: String!
	pathQualifiedName: String!
	
	propertyAsString(name: String!) : String
	name: String
	title: String
	description: String
	created: Date
	createdIso: String
	modified: Date
	modifiedIso: String
	content: ContentData
	
	primaryParent: Node
	parents(assocType: String): [Node!]!
	children(assocType: String): [Node!]!
	childrenContains: [Node!]!
	childByName(name: String!, assocType: String = "cm:contains") : Node
	sourceAssocs(assocType: String) : [Node!]!
	targetAssocs(assocType: String) : [Node!]!
}

type Date {
	iso: String!
	format(format: String!) : String!
}
type QName {
	localName: String!
	namespaceURI: String!
	prefixString: String!
}
type ContentData {
	contentUrl: String!
	mimetype: String!
	size: Int!
	encoding: String!
	locale: String!
}
input SearchParameters {
	query: String!
	language: String
	limit: Int
}