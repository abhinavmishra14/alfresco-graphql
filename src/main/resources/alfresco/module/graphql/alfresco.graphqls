type Query {
	node: NodeQuery!
	authority: AuthorityQuery!
}

type NodeQuery {
	companyHome: Node!
	userHome: Node!
	sharedHome: Node!
	sitesHome: Node!
	
	byNodeRef(nodeRef: String!) : Node
	byUuid(uuid: String!) : Node
	query(
		query: String!, 
		language: String = "fts-alfresco",
		maxItems: Int = -1,
		skipCount: Int = 0,
		queryConsistency: QueryConsistency = DEFAULT
	): ResultSet
}

type Node {
	nodeRef: ID!
	uuid: ID!
	type: String!
	aspects: [String!]!
	
	pathDisplay: String!
	pathPrefixString: String!
	pathQualifiedName: String!
	
	propertyAsString(name: String!) : String
	name: String
	title: String
	description: String
	creator: Authority
	created: Date
	createdIso: String
	modifier: Authority
	modified: Date
	modifiedIso: String
	
	content(property: String! = "cm:content") : ContentData
	
	inheritParentPermissions: Boolean!
	permissions: [AccessPermission!]!
	allSetPermissions: [AccessPermission!]!
	hasPermission(permission: String!) : Boolean!
	hasReadPermission: Boolean!
	hasWritePermission: Boolean!
	hasDeletePermission: Boolean!
	
	primaryParent: Node
	parents(assocType: String): [Node!]!
	children(assocType: String): [Node!]!
	childrenContains: [Node!]!
	childByName(name: String!, assocType: String = "cm:contains") : Node
	sourceAssocs(assocType: String) : [Node!]!
	targetAssocs(assocType: String) : [Node!]!
}

type Date {
	iso: String!
	format(format: String!) : String!
}
type ContentData {
	asString: String!
	asBase64: String!
	downloadUrl: String!

	mimetype: String!
	size: Int!
	encoding: String
	locale: String
}
type ResultSet {
	nodes: [Node!]!
	numberFound: Int!
}
enum QueryConsistency { EVENTUAL, TRANSACTIONAL, DEFAULT, TRANSACTIONAL_IF_POSSIBLE, HYBRID }

type AuthorityQuery {
	currentUser: Authority!
	byName(name: String!) : Authority
}
type Authority {
	name: ID!
	nodeRef: ID
	uuid: ID
	
	type: AuthorityType
	displayName: String
	shortName: String
	
	firstName: String
	lastName: String
	email: String
	propertyAsString(name: String!) : String
	
	containedAuthorities(type: AuthorityType, immediate: Boolean = false) : [Authority!]!
	containingAuthorities(type: AuthorityType, immediate: Boolean = false) : [Authority!]!
}
enum AuthorityType {
	ADMIN
	EVERYONE
	OWNER
	GUEST
	GROUP
	ROLE
	USER
	WILDCARD
}
type AccessPermission {
	permission: String!
	allowed: Boolean!
	denied: Boolean!
	authority: Authority!
	authorityType: AuthorityType!
	inherited: Boolean!
	setDirectly: Boolean!
}