type Query {
	node: NodeQuery!
	authority: AuthorityQuery!
	workflow: WorkflowQuery!
	system: SystemQuery!
}

type NodeQuery {
	workspaceStoreRoot: Node!
	archiveStoreRoot: Node!
	companyHome: Node!
	userHome: Node!
	sharedHome: Node!
	sitesHome: Node!
	
	byNodeRef(nodeRef: ID!) : Node
	byUuid(uuid: ID!) : Node
	byPath(path: String!) : Node
	query(
		query: [Predicate!]!, 
		maxItems: Int = -1,
		skipCount: Int = 0,
		queryConsistency: QueryConsistency = DEFAULT,
		sort: [SortDefinition!]
	): ResultSet!
	queryFirst(
		query: [Predicate!]!, 
		queryConsistency: QueryConsistency = DEFAULT,
		sort: [SortDefinition!]
	): Node
	queryUnique(
		query: [Predicate!]!, 
		queryConsistency: QueryConsistency = DEFAULT,
		sort: [SortDefinition!]
	): Node
	queryNative(
		query: String!, 
		language: String = "fts-alfresco",
		skipCount: Int = 0,
		maxItems: Int = -1,
		queryConsistency: QueryConsistency = DEFAULT,
		sort: [SortDefinition!]
	): ResultSet!
}

type Node {
	nodeRef: ID!
	uuid: ID!
	type: String!
	isContent: Boolean!
	isFolder: Boolean!
	aspects: [String!]!

	asVariable(variable: String!) : Boolean!
	moveTo(variable: String!) : Boolean!
	copyTo(variable: String!) : Node!
	createLinkTo(variable: String!) : Node!

	addChild(name: String!, type: TypeEnum!, assocType: String = "cm:contains", uuid: String) : Node!
	addChildFolder(name: String!, uuid: String) : Node!
	addChildContent(name: String!, uuid: String) : Node!
	delete(withoutTrashcan: Boolean = false) : Boolean
	actions: Actions!
	startWorkflows: StartWorkflow!
	
	pathDisplay: String!
	pathPrefixString: String!
	pathQualifiedName: String!

	onlineEditionUrl: String!
	webDavUrl: String!
	shareUrl: String!
	
	name(setValue: String) : String
	title(setValue: String) : String
	description(setValue: String) : String
	creator: Authority
	created: Date
	createdIso: String
	modifier: Authority
	modified: Date
	modifiedIso: String
	owner: Authority
	properties: NodePropertiesType
	propertiesList: [PropertyValue!]!
	propertyAsString(name: PropertyEnum!) : String
	
	content(property: PropertyEnum! = cm_content, rendition: String) : ContentData
	contentCreate(property: PropertyEnum! = cm_content) : ContentData!
	
	inheritParentPermissions(setValue: Boolean) : Boolean!
	permissions: [AccessPermission!]!
	allSetPermissions: [AccessPermission!]!
	hasPermission(permission: String!) : Boolean!
	hasWritePermission: Boolean!
	hasDeletePermission: Boolean!
	settablePermissions: [String!]!
	setPermission(authority: String!, permission: String!, allow: Boolean = true) : Boolean!
	deletePermission(authority: String!, permission: String!) : Boolean!
	
	primaryParent: Node
	primaryParents(ignoreFirst: Int = 1, reverse: Boolean = true): [Node!]!
	parents(assocType: String): [Node!]!
	children(assocType: String, skipCount: Int = 0, maxItems: Int = 2147483647, sort: [SortDefinition!]): [Node!]!
	childrenContains(skipCount: Int = 0, maxItems: Int = 2147483647, sort: [SortDefinition!]): [Node!]!
	childByName(name: String!, assocType: String = "cm:contains") : Node
	sourceAssocs(assocType: String) : [Node!]!
	targetAssocs(assocType: String) : [Node!]!
	sourceAssoc(assocType: String) : Node
	targetAssoc(assocType: String) : Node

	currentVersion: Version
	allVersions: [Version!]
	
	locked: Boolean!
	lockedAndReadOnly: Boolean!
	lockType: String
	lockStatus: String
	
	checkout: Node!
	checkin: Node!
	cancelCheckout: Node!
	workingCopy: Node
	checkedOut: Node
}

type Date {
	iso: String!
	format(format: String!) : String!
}
type ContentData {
	asString(setValue: String, setEncoding: String, setLocal: String, setMimetype: String) : String
	asBase64(setValue: String, setEncoding: String, setLocal: String, setMimetype: String) : String
	asDataUrl: String
	downloadUrl: String!

	property: String!
	mimetype: String!
	size: Int!
	sizeHumanReadable: String!
	encoding: String
	locale: String
}
type PropertyValue {
	property: String!
	valueAsString: String
}
type Version {
	versionLabel: String!
	versionType: String!
	description: String
	frozenModifiedDate: Date!
	frozenModifier: Authority!
	frozenStateNode: Node
}
type ResultSet {
	nodes: [Node!]!
	numberFound: Int!
	min: Node!
	max: Node!
	sum: Node!
	and: Node!
	or: Node!
}
enum QueryConsistency { EVENTUAL, TRANSACTIONAL, DEFAULT, TRANSACTIONAL_IF_POSSIBLE, HYBRID }

input Predicate {
	not: Boolean

	and: [Predicate!]
	or: [Predicate!]
	eq: EqPredicate
	eqInt: IntEqPredicate
	match: MatchPredicate
	range: RangePredicate
	rangeInt: IntRangePredicate
	isTrue: BooleanPropertyEnum
	isFalse: BooleanPropertyEnum
	type: TypeEnum
	exactType: TypeEnum
	aspect: AspectEnum
	exactAspect: AspectEnum
	natif: String
}
input EqPredicate {
	property: PropertyEnum!
	value: String!
}
input MatchPredicate {
	property: TokenizePropertyEnum!
	value: String!
}
input IntEqPredicate {
	property: IntPropertyEnum!
	value: Int!
}
input RangePredicate {
	property: PropertyEnum!,
	min: String
	max: String
	minInclusive: Boolean
	maxInclusive: Boolean
}
input IntRangePredicate {
	property: IntPropertyEnum!,
	min: Int
	max: Int
	minInclusive: Boolean
	maxInclusive: Boolean
}
input SortDefinition {
	property: PropertyEnum!
	direction: SortDirection
}
enum SortDirection { ASCENDING, DESCENDING }

type AuthorityQuery {
	currentUser: Authority!
	byName(name: String!) : Authority
}
type Authority {
	name: ID!
	nodeRef: ID
	uuid: ID
	node: Node

	asVariable(variable: String!) : Boolean!
	
	type: AuthorityType
	displayName: String
	shortName: String
	
	firstName: String
	lastName: String
	email: String
	homeFolder: Node
	avatar: ContentData
	propertyAsString(name: PropertyEnum!) : String
	
	containedAuthorities(type: AuthorityType, immediate: Boolean = false) : [Authority!]!
	containingAuthorities(type: AuthorityType, immediate: Boolean = false) : [Authority!]!
}
enum AuthorityType {
	ADMIN
	EVERYONE
	OWNER
	GUEST
	GROUP
	ROLE
	USER
	WILDCARD
}
type AccessPermission {
	permission: String!
	allowed: Boolean!
	denied: Boolean!
	authority: Authority!
	authorityType: AuthorityType!
	inherited: Boolean!
	setDirectly: Boolean!
}

type SystemQuery {
	descriptor : DescriptorService!
	modules: [ModuleDetails!]!
	missingModules: [ModuleDetails!]!
	testConcurentException(modulo: Int = 5) : Boolean
}
type DescriptorService {
	serverDescriptor: Descriptor
	currentRepositoryDescriptor: Descriptor
	installedRepositoryDescriptor: Descriptor
	licenseDescriptor: LicenseDescriptor
}
type Descriptor {
	id: String
	name: String
	versionMajor: String
	versionMinor: String
	versionRevision: String
	versionLabel: String
	versionBuild: String
	version: String
	edition: String
	schema: Int
	descriptorKeys: [String]
}
type LicenseDescriptor {
	issued: Date
	validUntil: Date
	days: Int
	remainingDays: Int
	subject: String
	holderOrganisation: String
	heartBeatDisabled: Boolean
	heartBeatUrl: String
	maxDocs: Int
	maxUsers: Int
	cloudSyncKey: String
	clusterEnabled: Boolean
    cryptodocEnabled: Boolean
	transformationServerExpiryDate: String
}
type ModuleDetails {
	id: ID!
	title: String
	description: String
	moduleVersionNumber: String
}

type WorkflowQuery {
	definitions: [WorkflowDefinition!]!
	start: StartWorkflow!

	activeWorkflows: [WorkflowInstance!]!
	workflows: [WorkflowInstance!]!
	completedWorkflows: [WorkflowInstance!]!
	workflowById(id: ID!) : WorkflowInstance

	taskById(id: ID!) : WorkflowTask
	queryTasks(
		taskId: String,
		taskState: WorkflowTaskState = IN_PROGRESS,
		actorId: String,
		processId: String,
		workflowDefinitionName: String,
		active: Boolean = true, 
		limit: Int! = -1) : [WorkflowTask!]!
}
type WorkflowInstance {
	id: ID!
	description: String
	active: Boolean
	initiatorNode: Node
	initiator: Authority
	priority: Int
	startDate: Date
	dueDate: Date
	endDate: Date
	workflowPackage: Node
	context: Node
	definition: WorkflowDefinition
	
	paths: [WorkflowPath!]!
	startTask: WorkflowTask
	
	cancelWorkflow: WorkflowInstance
	deleteWorkflow: WorkflowInstance
}
type WorkflowPath {
	id: ID!
	instance: WorkflowInstance
	node: WorkflowNode 
	active: Boolean
	tasks: [WorkflowTask!]!

	propertiesList: [PropertyValue!]!
	propertyAsString(name: String!) : String
	
	signal(transition: ID!) : WorkflowPath!
	fireEvent(event: ID!) : WorkflowPath!
}
type WorkflowNode {
	name: String
	title: String
	description: String
	type: String
	taskNode: Boolean
	transitions: [WorkflowTransition]
}
type WorkflowTransition {
	id: ID!
	title: String
	description: String
	default: Boolean
}
type WorkflowDefinition {
	id: String
	name: String
	version: String
	title: String
	description: String
	startTaskDefinition: WorkflowTaskDefinition
}
type WorkflowTaskDefinition {
	id: ID!
	node: WorkflowNode
	metadata: ClassDefinition
}
type ClassDefinition {
	name: String!
}
type WorkflowTask {
	id: ID!
	name: String
	title: String
	description: String
	state: WorkflowTaskState
	path: WorkflowPath 
	definition: WorkflowTaskDefinition
	
	properties: WorkflowPropertiesType
	propertiesList: [PropertyValue!]!
	propertyAsString(name: String!) : String

	endTask(transition: ID) : WorkflowTask!
}
enum WorkflowTaskState {IN_PROGRESS, COMPLETED}