type Query {
	node: NodeQuery!
	authority: AuthorityQuery!
	system: SystemQuery!
}

type NodeQuery {
	companyHome: Node!
	userHome: Node!
	sharedHome: Node!
	sitesHome: Node!
	
	byNodeRef(nodeRef: String!) : Node
	byUuid(uuid: String!) : Node
	query(
		query: [Predicate!]!, 
		maxItems: Int = -1,
		skipCount: Int = 0,
		queryConsistency: QueryConsistency = DEFAULT,
		sort: [SortDefinition!]
	): ResultSet
	queryNative(
		query: String!, 
		language: String = "fts-alfresco",
		skipCount: Int = 0,
		maxItems: Int = -1,
		queryConsistency: QueryConsistency = DEFAULT,
		sort: [SortDefinition!]
	): ResultSet
}

type Node {
	nodeRef: ID!
	uuid: ID!
	type: String!
	aspects: [String!]!
	
	pathDisplay: String!
	pathPrefixString: String!
	pathQualifiedName: String!
	
	propertyAsString(name: PropertyEnum!) : String
	name: String
	title: String
	description: String
	creator: Authority
	created: Date
	createdIso: String
	modifier: Authority
	modified: Date
	modifiedIso: String
	owner: Authority
	properties: PropertiesType
	propertiesList: [PropertyValue!]!
	
	content(property: PropertyEnum! = "cm:content", rendition: String) : ContentData
	
	inheritParentPermissions: Boolean!
	permissions: [AccessPermission!]!
	allSetPermissions: [AccessPermission!]!
	hasPermission(permission: String!) : Boolean!
	hasReadPermission: Boolean!
	hasWritePermission: Boolean!
	hasDeletePermission: Boolean!
	
	primaryParent: Node
	parents(assocType: String): [Node!]!
	children(assocType: String, skipCount: Int = 0, maxItems: Int = 2147483647): [Node!]!
	childrenContains(skipCount: Int = 0, maxItems: Int = 2147483647): [Node!]!
	childByName(name: String!, assocType: String = "cm:contains") : Node
	sourceAssocs(assocType: String) : [Node!]!
	targetAssocs(assocType: String) : [Node!]!
}

type Date {
	iso: String!
	format(format: String!) : String!
}
type ContentData {
	asString: String!
	asBase64: String!
	downloadUrl: String!

	mimetype: String!
	size: Int!
	encoding: String
	locale: String
}
type PropertyValue {
	property: String!
	valueAsString: String
}
type ResultSet {
	nodes: [Node!]!
	numberFound: Int!
}
enum QueryConsistency { EVENTUAL, TRANSACTIONAL, DEFAULT, TRANSACTIONAL_IF_POSSIBLE, HYBRID }

input Predicate {
	not: Boolean

	and: [Predicate!]
	or: [Predicate!]
	match: MatchPredicate
	eq: MatchPredicate
	range: RangePredicate
	type: TypeEnum
	exactType: TypeEnum
	aspect: AspectEnum
	exactAspect: AspectEnum
	natif: String
}
input MatchPredicate {
	property: PropertyEnum!
	value: String!
	type: PredicateValueType
}
input RangePredicate {
	property: PropertyEnum!,
	min: String
	max: String
	minInclusive: Boolean
	maxInclusive: Boolean
	type: PredicateValueType
}
enum PredicateValueType { STRING, NUMBER, BOOLEAN, DATE }
input SortDefinition {
	property: PropertyEnum!
	direction: SortDirection
}
enum SortDirection { ASCENDING, DESCENDING }

type AuthorityQuery {
	currentUser: Authority!
	byName(name: String!) : Authority
}
type Authority {
	name: ID!
	nodeRef: ID
	uuid: ID
	node: Node
	
	type: AuthorityType
	displayName: String
	shortName: String
	
	firstName: String
	lastName: String
	email: String
	propertyAsString(name: PropertyEnum!) : String
	
	containedAuthorities(type: AuthorityType, immediate: Boolean = false) : [Authority!]!
	containingAuthorities(type: AuthorityType, immediate: Boolean = false) : [Authority!]!
}
enum AuthorityType {
	ADMIN
	EVERYONE
	OWNER
	GUEST
	GROUP
	ROLE
	USER
	WILDCARD
}
type AccessPermission {
	permission: String!
	allowed: Boolean!
	denied: Boolean!
	authority: Authority!
	authorityType: AuthorityType!
	inherited: Boolean!
	setDirectly: Boolean!
}

type SystemQuery {
	descriptor : DescriptorService!
	modules: [ModuleDetails!]!
	missingModules: [ModuleDetails!]!
}
type DescriptorService {
	serverDescriptor: Descriptor
	currentRepositoryDescriptor: Descriptor
	installedRepositoryDescriptor: Descriptor
	licenseDescriptor: LicenseDescriptor
}
type Descriptor {
	id: String
	name: String
	versionMajor: String
	versionMinor: String
	versionRevision: String
	versionLabel: String
	versionBuild: String
	version: String
	edition: String
	schema: Int
	descriptorKeys: [String]
}
type LicenseDescriptor {
	issued: Date
	validUntil: Date
	days: Int
	remainingDays: Int
	subject: String
	holderOrganisation: String
	heartBeatDisabled: Boolean
	heartBeatUrl: String
	maxDocs: Int
	maxUsers: Int
	cloudSyncKey: String
	clusterEnabled: Boolean
    cryptodocEnabled: Boolean
	transformationServerExpiryDate: String
}
type ModuleDetails {
	id: String
	title: String
	description: String
	moduleVersionNumber: String
}